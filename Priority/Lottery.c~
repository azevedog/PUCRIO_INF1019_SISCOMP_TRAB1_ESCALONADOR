/*
Escalonador com politica de loteria

@Autores:
Gustavo B H Azevedo - 1321442
Maria Carolina Santos - 1312063
*/
#include <time.h>
#include <signal.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <stdio.h>
#include "contractLottery.h"

//Tempo de execucao de um programa
#define QUANTUM 1

//Identificador area de memoria do PID deste processo
int ipcid_PID_ESC;

//Identificador area de memoria do PID do processo interpretador
int ipcid_PID_INT;

//Identificador area de memoria compartilhada (NOME do programa)
int ipcid_TRANSF_NAME;

//Identificador area de memoria compartilhada (tickets)
int ipcid_TRANSF_TICK;

//Mapa de pID para numero de tickets (index-1)
int tickets_TO_PID[20];

//Id deste processo
int* pID_ESC;

//Id do processo escalonador
int* pID_INT = NULL;

//Area de memoria compartilhada (tickets)
int* transfAREA_TICK = NULL;

//Area de memoria compartilhada (nome do programa)
char* transfAREA_NAME = NULL;

//Vetor de caracteres do nome do programa (memoria local)
char localAREA_NAME[MAX_];

//Arquivo de sa√≠da para escrita de stdout
FILE* outputFILE;

//Inicializa o vetor de pIDs para Tickets.
void startTickets(){
	int i;
	for (i=0; i<20; i++){
		tickets_TO_PID[i]=-1;
	}
}

//Rotina de limpeza para encerramento
void exitRoutine(){
	shmdt(transfAREA_NAME);
	shmctl(ipcid_TRANSF_NAME, IPC_RMID, 0);
	shmdt(transfAREA_TICK);
	shmctl(ipcid_TRANSF_TICK, IPC_RMID, 0);
	shmdt(pID_INT);
	shmctl(ipcid_PID_INT, IPC_RMID, 0);
	shmdt(pID_ESC);
	shmctl(ipcid_PID_ESC, IPC_RMID, 0);
	fclose(outputFILE);
}

//Aguarda sinal de dados escritos iniciar escalonamento
void usr1Handler(int sinal){
	if(transfAREA_NAME==NULL){
		ipcid_TRANSF_NAME = shmget(TRANSF_NAME_KEY, sizeof(char)*MAX_, S_IRUSR|S_IWUSR);
		transfAREA_NAME = (char*) shmat(ipcid_TRANSF_NAME, 0, 0);
	}

	if(transfAREA_TICK==NULL){
		ipcid_TRANSF_TICK = shmget(TRANSF_TICK_KEY, sizeof(int)*MAX_TICK, S_IRUSR|S_IWUSR);
		transfAREA_TICK = (int*) shmat(ipcid_TRANSF_TICK, 0, 0);
	}

	int i;
	for(i=0;i<MAX_; i++){
		localAREA_NAME[i]=transfAREA_NAME[i];
	}

	int f = fork();
	if(f!=0){
		kill(f, SIGSTOP);
		printf("ESC: Recebido (%s), pidFilho: %d\n", localAREA_NAME, f);
		
		for(i=0;i<MAX_TICK; i++){
			int ticketNum = transfAREA_TICK[i]-1;
			if(ticketNum>=0){
				tickets_TO_PID[ticketNum]=f;
				printf("ESC -  ticket: %d to pid: %d\n", ticketNum+1,f);
			}
		}
		
		
		if(pID_INT==NULL){
			ipcid_PID_INT = shmget(INT_KEY, sizeof(int), S_IRUSR|S_IWUSR);
			pID_INT = (int*) shmat(ipcid_PID_INT, 0, 0);
		}
		
		kill(*pID_INT, SIGUSR2);
				
	}else{
		char* s[] = {localAREA_NAME, NULL};
		execve(localAREA_NAME, s ,0);
	}


	
}

void sigHandler(int sinal){
	printf("TOMEI EXIT %d\n", sinal);
	exitRoutine();
	exit(42);
}

// Cadastramento do tratador de sinal para liberar recursos
void registerHandler(){
	void (*p) (int);
	p = signal (SIGUSR1, usr1Handler);
	if(p == SIG_ERR){
		printf("Erro de registro SIGUSR1\n");
		exit(-1);
	}
	p = signal (SIGSEGV, sigHandler);
	if(p == SIG_ERR){
		printf("Erro de registro SIGSEGV\n");
		exit(-1);
	}
	p = signal (SIGQUIT, sigHandler);
	if(p == SIG_ERR){
		printf("Erro de registro SIGQUIT\n");
		exit(-1);
	}
	p = signal (SIGTERM, sigHandler);
	if(p == SIG_ERR){
		printf("Erro de registro SIGTERM\n");
		exit(-1);
	}
}


//Sortei um numero no intervalo de tickets validos
int randomTicket() { 
	int num = -1;
	while(1) {
		if( num >= 0 && num <= 19 ) break;
		num = rand() % 20;
	}
}

// Recupera o pid de um ticket sortead aleatoriamente
int getNextPid(){
	int ticketNum, pid = -1;
	while(pid==-1){
		ticketNum = randomTicket();
		pid = tickets_TO_PID[ticketNum];
	}
	printf("ESC: Sorteado %d pid %d\n", ticketNum+1);
	return pid;
}

//Remove o pid concluido do mapa
void removePid(int pid){
	int i;
	for (i=0; i<20; i++){
		if (tickets_TO_PID[i]==pid){
			tickets_TO_PID[i] = -1;
		}
	}
}

// Funcao principal de trabalho. 42 indica conclusao com sucesso
int main (void){
	
	//Cadastramento do PID em memoria
	ipcid_PID_ESC = shmget(ESC_KEY, sizeof(int), IPC_CREAT|IPC_EXCL|S_IRUSR|S_IWUSR);
	pID_ESC = (int*) shmat(ipcid_PID_ESC, 0, 0); 
	*pID_ESC = getpid();
	
	// Cadastramento do tratador de sinal para liberar recursos
	registerHandler();

	//Atribui uma semente para geracao de tickets aleatorios
	srand(time(NULL));

	//Inicializa mapa de pid para tickets
	startTickets();
	
	/*if ((outputFILE = fopen ("./saida.txt", "a+")) == NULL){
		printf("Erro ao abrir o arquivo de outputFILE!\n");
		exit(-1);
	}*/
	
	while(1){
		int pid = getNextPid();
		int status;
		pid_t result = waitpid(pid, &status, WNOHANG);
		if (result == 0){
			printf("ESC: Fazendo (%d) ret:%d \n", pid, result);
			kill(pid, SIGCONT);
			sleep(QUANTUM);
			kill(pid, SIGSTOP);	
		}else{
			removePid(pid);
		}

	}
	return 42;
}
